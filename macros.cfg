#####################################################################
#   Macros
#####################################################################
[bed_mesh]
speed: 300
horizontal_move_z: 2
##--------------------------------------------------------------------
##	Uncomment for 300mm build
mesh_min: 20, 25
mesh_max: 280,235
##--------------------------------------------------------------------
fade_start: 0.6                 #0.6
fade_end: 10.0
probe_count:10,10
algorithm: bicubic
zero_reference_position: 150, 150

#############################################################
#                       G32
#############################################################

[gcode_macro G32]
gcode:
       
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    led_qgl
    QUAD_GANTRY_LEVEL         
    G28
    RESTORE_GCODE_STATE NAME=STATE_G32
      


############################################################
#                     Print Start
############################################################

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice

gcode:
 # Parameters
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.HOTEND|int %}
    {% set chambertemp = params.CHAMBER|default(0)|int %}

    CLEAR_TEMPERATURE_LED LED=chamber
    chamber_test

    M190 S115
    #bed to 115

     BED_MESH_CLEAR
     SET_GCODE_OFFSET Z=0

    G28 METHOD=PROXIMITY

    G28 Z METHOD=CONTACT CALIBRATE=0          # Full home (XYZ)

    G90                   # Absolute position

    G0 Z2   ; position beacon at 2mm for heat soak

    SET_FAN_SPEED FAN=bedfans SPEED=0.20
    RESPOND MSG="Heating bed to temp for soak: 115c"           # Displays info
    M190 S115 #bed to 115
    #M106 S230 # Turns on the PT-fan
    RESPOND MSG="Waiting for chamber to reach (on Chamber): {chambertemp}c"           # Displays info
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chambertemp}   # Waits for chamber to reach desired temp
    
    RESPOND MSG="Bed  target temp: {bedtemp}c"           # Displays info
    M190 S{bedtemp} 


     # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
    RESPOND MSG="Hotend: 150c"          # Displays info
    M109 S150                                    # Heats the nozzle to 150c

    led_qgl
    G28 Z METHOD=CONTACT CALIBRATE=1

    QUAD_GANTRY_LEVEL
    G28 Z

    G90                            ; absolute positioning
    led_busy
    #led_bed_mesh
    BED_MESH_CALIBRATE ADAPTIVE=1 RUNS=2

    G28 Z METHOD=CONTACT CALIBRATE=0

    M104 S{hotendtemp}                    ; set extruder to print temp
    M109 S{hotendtemp}                    ; wait for extruder temp

    SET_GCODE_OFFSET Z=0.07

    SET_FAN_SPEED FAN=bedfans SPEED=0.85
    PRIME_LINE
    led_print

   
    
  

############################################################
#                     ALT Print_Start2
############################################################

[gcode_macro PRINT_START2]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice

gcode:
 # Parameters
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.HOTEND|int %}
    {% set chambertemp = params.CHAMBER|default(0)|int %}

    M190 S{bedtemp}
    M109 S{hotendtemp -100}
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chambertemp}
    #G32                            ; home all axes
    G90                            ; absolute positioning
    G1 Z20 F3000                   ; move nozzle away from bed 
    G1 E50 F500 
    #clean_nozzle 
    #led_calibrate_z
    #CALIBRATE_Z
    led_bed_mesh
    #BED_MESH_CALIBRATE     
    M109 S{hotendtemp}             ;Wait for Hotend temp
    clean_nozzle
    #PRIME_LINE
    led_print 



##############################################################
#                      Print End
##############################################################

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 25, th.axis_maximum.z]|min %}

   
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS

   
    SET_FAN_SPEED FAN=bedfans SPEED=1                                                ; crank nevermoore fan to 100% to filter chamber
    
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    #clean_nozzle
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    UPDATE_DELAYED_GCODE ID=nevermoore_off DURATION=120                                     ; turn exhaust off in 2 min
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[delayed_gcode nevermoore_off]
gcode:
  #SET_FAN_SPEED FAN=exhaust_fan SPEED=0
  SET_FAN_SPEED FAN=bed_blowers SPEED=0
  SET_FAN_SPEED FAN=bedfans SPEED=0

    led_ready

##################################################################
#               Shaketune
##################################################################

[shaketune]
  result_folder: ~/printer_data/config/ShakeTune_results
#    The folder where the results will be stored. It will be created if it doesn't exist.
  number_of_results_to_keep: 3
#    The number of results to keep in the result_folder. The oldest results will
#    be automatically deleted after each runs.
  keep_raw_csv: False
#    If True, the raw CSV files will be kept in the result_folder alongside the
#    PNG graphs. If False, they will be deleted and only the graphs will be kept.
  show_macros_in_webui: True
#    Mainsail and Fluidd doesn't create buttons for "system" macros that are not in the
#    printer.cfg file. If you want to see the macros in the webui, set this to True.
  timeout: 300
#    The maximum time in seconds to let Shake&Tune process the CSV files and generate the graphs.

#################################################################
#                       Calibrate Z
#################################################################

#[gcode_macro CALIBRATE_Z]
#rename_existing: BASE_CALIBRATE_Z
#gcode:
    #{% set bed_position = params.BED_POSITION|default('None') %}
    #G28                                      # can also be a conditional homing macro
   # M117 Z-Calibration..
    #led_calibrate_z
     # ATTACH_PROBE                # a macro for fetching the probe first
    #{% if bed_position != 'None' %}
     # BASE_CALIBRATE_Z BED_POSITION={bed_position}
    #{% else %}
      #BASE_CALIBRATE_Z
    #{% endif %}
   # DETACH_PROBE                # and parking it afterwards (or DOCK_PROBE in klicky macros)
   # M117

#####################################################################
#                         M600
#####################################################################

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 
    E-10 F1000
    RESTORE_GCODE_STATE NAME=M600_state
    #PURGE_LINE

#################################################################
#                      Purge Line
#################################################################

[gcode_macro PURGE_LINE]
gcode:
    M83 ; extruder relative mode
    G90
    G0 X5 Y5 G0 Z.75 F9000 ; Go to front
    G92 E0 ; zero the extruded length
    G1 Y10 E21 F200 ; Extrude 25mm of filament in a 4cm line
    G1 Y40 E18 F500 ; Extrude 25mm of filament in a 4cm line
    G92 E0 ; zero the extruded length
    G4 S3
    G1 Z.5
    G1 Y70 Z5 F9000
    G1 E.5 F3000

#########################################################################
#                               Prime line 
#########################################################################

#
# Parametric PRIME LINE macro.
# Most settings have sane defaults, but can be overridden with optional input parameters. None of  the input parameters are mandatory.
# Usage:
#    PRIME_LINE
#
# Full list of parameters, use none or any combination:
#    PRIME_LINE NOZZLE=0.4 XPAD=0 YPAD=0 LENGTH=150 PRINT_SPEED=30 TRAVEL_SPEED=200 PURGE=8 RETRACT=1 EXTRUSION_MULTIPLIER=1.25 PRINT_HANDLE=1 HANDLE_FAN=75
#
# Version 1.2
#
[gcode_macro PRIME_LINE]
description: Print an extruder priming line with optional purge and easy removal handle
gcode:
      led_print
    # settings
    {% set line = {
      'x_padding'      : params.XPAD|default(0)|float,  # left/right padding around the bed the line can't print into
      'y_padding'      : params.YPAD|default(0)|float,  # top/bottom padding around the bed the line can't print into
      'initial_purge'  : params.PURGE|default(8)|int,   # mm of filament to purge before printing. set to 0 to disable
      'retract_after'  : params.RETRACT|default(1)|int, # mm of filament to retract after printing. set to 0 to disable
      'length'         : params.LENGTH|default(150)|int,   # mm, length of the prime line
      'print_speed'    : params.PRINT_SPEED|default(30)|int,
      'travel_speed'   : params.TRAVEL_SPEED|default(200)|int,
      'extr_multi'     : params.EXTRUSION_MULTIPLIER|default(1.25)|float,  # apply to prime lines
      'overlap_percent': 80, # how much prime lines overlap each other
    } %}
    {% set handle = {
      'do_print'    : params.PRINT_HANDLE|default(1)|int,  # set to 0 to disable printing the handle
      'fan_percent' : params.HANDLE_FAN|default(75)|int,   # without fan the handle is too small and melty to print upright
      'width'       : 5.0,
      'height'      : 5.0,
      'move_away'   : 60   # how much to move the toolhead away from the printed handle once done. set 0 to disable
    } %}
    {% set nozzle_diameter = params.NOZZLE|default(printer.configfile.config['extruder'].nozzle_diameter|float)|float %}

    # sanity check and computed variables
    {% set max_x, max_y = printer.toolhead.axis_maximum.x|float, printer.toolhead.axis_maximum.y|float %}
    {% set _ = line.update({'width': nozzle_diameter * 1.25, 'height': nozzle_diameter / 2, 'length': [range(line.length-10,line.length+10)|random, max_x - 2 * line.x_padding - 2]|min}) %}
    {% set _ = line.update({'e_per_mm': line.extr_multi * (line.width * line.height) / (3.1415 * (1.75/2)**2), 'x_start': max_x / 2 - line.length / 2, 'y_start': line.y_padding + range(0,5)|random})  %}

    SAVE_GCODE_STATE NAME=STATE_PRIME_LINE

    {action_respond_info('Printing prime line')}
    M117 Prime Line
    G90 # absolute positioning
    G0 X{line.x_start} Y{line.y_start + (handle.width / 2)|int + 1} Z{line.height} F{line.travel_speed * 60} # move to starting position
    G91 # relative positioning
    G1 E{line.initial_purge} F{5 * 60} # extrude at ~12mm3/sec
    G0 F{line.print_speed * 60} # set print speed
    G1 X{line.length} E{line.length * line.e_per_mm} # print forward line
    G0 Y{line.width * line.overlap_percent / 100} # overlap forward line
    G1 X-{line.length / 2} E{(line.length / 2) * line.e_per_mm}  # print backward line for half the length

    # print a handle for easy removal
    {% if handle.do_print != 0 and handle.width != 0 and handle.height != 0 %}
      G0 X{line.length / 2 - handle.width} Y{handle.width / 2} F{line.travel_speed * 60} # move into position for printing handle
      G0 F{line.print_speed * 60} # set print speed
      {% set saved_fan_speed = (printer['fan'].speed * 256)|int %}
      M106 S{((handle.fan_percent / 100) * 256)|int} # set part fan to desired speed
      {% for _ in range((line.height * 1000)|int, (handle.height * 1000)|int, (line.height * 1000)|int) %} # loop however many cycles it takes to print required handle height
        G1 Y{loop.cycle(-1.0, 1.0) * handle.width} E{handle.width * line.e_per_mm} # handle layer
        G0 X-{line.width * 0.2} Z{line.height} # move up and shift the layer to make the handle sloping
      {% endfor %}
      M106 S{saved_fan_speed} # restore previous part fan speed
    {% endif %}
    
    G1 E-{line.retract_after} F{50 * 60} # retract ar 50mm/sec after printing
    G0 Y{handle.move_away} F{line.travel_speed * 60}
    M117

    RESTORE_GCODE_STATE NAME=STATE_PRIME_LINE

##########################################################################
#                               LED Macros
##########################################################################

#  STOP_LED_EFFECTS
#  SET_LED_EFFECT effect=

[gcode_macro led_Homing]
gcode:
 STOP_LED_EFFECTS
 SET_LED_EFFECT EFFECT=loading_logo
 SET_LED_EFFECT EFFECT=loading_nozzle
 SET_LED_EFFECT EFFECT=case_homing

[gcode_macro led_idle_startup]
gcode:
 STOP_LED_EFFECTS
 SET_LED_EFFECT EFFECT=logo_idle

[gcode_macro led_ready]
gcode:
 STOP_LED_EFFECTS
 SET_LED_EFFECT EFFECT=led_ready
 SET_LED_EFFECT EFFECT=led_nozzle_initial
 #SET_LED_EFFECT EFFECT=fan_nozzle_initial
 SET_LED_EFFECT EFFECT=idle_on2
 

[gcode_macro led_qgl]
gcode:
 STOP_LED_EFFECTS
 SET_LED_EFFECT EFFECT=led_qgl
 SET_LED_EFFECT EFFECT=led_qgl_nozzle
 #SET_LED_EFFECT EFFECT=led_qgl_fan
 SET_LED_EFFECT EFFECT=case_qgl

[gcode_macro led_calibrate_z]
gcode:
 STOP_LED_EFFECTS
 SET_LED_EFFECT EFFECT=led_calibration_z
 SET_LED_EFFECT EFFECT=led_calibration_z_nozzle
 SET_LED_EFFECT EFFECT=case_calibrating_z_left
 SET_LED_EFFECT EFFECT=case_calibrating_z_right

[gcode_macro led_bed_mesh]
gcode:
 STOP_LED_EFFECTS
 SET_LED_EFFECT EFFECT=led_bed_mesh_calibrate
 SET_LED_EFFECT EFFECT=led_bed_mesh_nozzle
#SET_LED_EFFECT EFFECT=led_bed_mesh_fan
 SET_LED_EFFECT EFFECT=case_meshing

[gcode_macro led_clean]
gcode:
 STOP_LED_EFFECTS
 SET_LED_EFFECT EFFECT=led_clean
 SET_LED_EFFECT EFFECT=led_clean_nozzle
 SET_LED_EFFECT EFFECT=case_cleaning

[gcode_macro led_print]
gcode:
 STOP_LED_EFFECTS
 SET_LED_EFFECT EFFECT=led_start_print
 SET_LED_EFFECT EFFECT=led_nozzle_print
 SET_LED_EFFECT EFFECT=idle_on
 #SET_LED_EFFECT EFFECT=fan_epilepsie

[gcode_macro led_busy]
gcode:
 STOP_LED_EFFECTS
 SET_LED_EFFECT EFFECT=epilepsie
 SET_LED_EFFECT EFFECT=case_busy

# [gcode_macro fan_chase]
# gcode:
#  STOP_LED_EFFECTS
#  SET_LED_EFFECT EFFECT=fan_chase

#[gcode_macro fan_epilepsie]
#gcode:
 #STOP_LED_EFFECTS
 #SET_LED_EFFECT EFFECT=fan_epilepsie

#[gcode_macro fan_strobe]
#STOP_LED_EFFECTS
 #SET_LED_EFFECT EFFECT=fan_strobe

#led_effect fan_epilepsie
 
#led_effect fan_chase

##########################################################################
#                             Chanber LEDs
##########################################################################

[gcode_macro CHAMBER_LED_ON]
gcode:
  STOP_LED_EFFECTS
  SET_LED LED=chamber RED=1 GREEN=1 BLUE=1 WHITE=1

[gcode_macro CHAMBER_LED_OFF]
gcode:
  STOP_LED_EFFECTS
  SET_LED LED=chamber RED=0 GREEN=0 BLUE=0 WHITE=0

[gcode_macro chamber_test]
gcode:
  STOP_LED_EFFECTS
  SET_LED_EFFECT EFFECT=case_epilepsie

[gcode_macro chamber_red]
gcode:
  STOP_LED_EFFECTS
  SET_LED_EFFECT EFFECT=case_on_red

[gcode_macro case_loading]
gcode:
  STOP_LED_EFFECTS
  SET_LED_EFFECT EFFECT=case_loading

[gcode_macro case_heating_left]
gcode:
  STOP_LED_EFFECTS
  SET_LED_EFFECT EFFECT=case_heating_left

[gcode_macro case_colortest]
gcode:
  STOP_LED_EFFECTS
  SET_LED_EFFECT EFFECT=case_colortest

[gcode_macro case_bedmesh]
gcode:
  STOP_LED_EFFECTS
  SET_LED_EFFECT EFFECT=case_meshing


##########################################################################
#                             SpeedTest
##########################################################################

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }

    # Absolute positioning
    G90
    
    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    # Home and get position for comparison later:
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    {% for i in range(iterations) %}
        # Large pattern
            # Diagonals
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            
            # Box
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
        
        # Small pattern
            # Small diagonals 
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            
            # Small box
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        G28
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
#[include bedblowers.cfg]
#[include led_effects.cfg]
#[include Adaptive_Mesh.cfg]

##########################################################################################
                             #Bed_Temp_LED
##########################################################################################

[gcode_macro PreheatBed]
gcode:
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=115
  CHAMBER_LED_OFF
  SET_TEMPERATURE_LED SENSOR="temperature_sensor chamber" LED=chamber
  SET_LED_EFFECT EFFECT=led_ready
  SET_LED_EFFECT EFFECT=led_nozzle_initial

## Neopixel Temperature Indicator
# Source: https://github.com/MapleLeafMakers/KlipperMacros/

# Usage:
# To begin monitoring a temperature:
#SET_TEMPERATURE_LED LED=<led_name> [INDEX=<index>] [SENSOR=heater_bed] [COOL_TEMP=22] [HOT_TEMP=100] [BRIGHTNESS=1.0]
# 
# To stop monitoring a temperature, and resume normal LED control
#CLEAR_TEMPERATURE_LED LED=<led_name> [INDEX=<index>]
#
# You can automate this by adding a delayed gcode macro to your printer.cfg, for example:
#
[gcode_macro SET_TEMPERATURE_LED]
description: Set one or more neopixels to track a temperature
gcode:
  {% set sensor = params.SENSOR|default('temperature_sensor chamber') %}
  {% set cool_temp = params.COOL_TEMP|default(22.0)|float %}
  {% set hot_temp = params.HOT_TEMP|default(50)|float %}
  {% set brightness = params.BRIGHTNESS|default(1.0)|float %}
  {% set led = params.LED %}
  {% set index = params.INDEX %}
  SET_LED_TEMPLATE LED={led}{% if index is defined %} INDEX={index}{% endif %} TEMPLATE=temperature_color param_sensor="'{sensor}'" param_cool_temp={cool_temp} param_hot_temp={hot_temp} param_brightness={brightness}


[gcode_macro CLEAR_TEMPERATURE_LED]
description: Set one or more neopixels to stop tracking a temperature and return to normal operation
gcode:
  {% set led = params.LED %}
  {% set index = params.INDEX %}
  SET_LED_TEMPLATE LED={led}{% if index is defined %} INDEX={index}{% endif %} TEMPLATE=


[display_template temperature_color]
param_cool_temp: 20
param_hot_temp: 50
param_sensor: 'temperature_sensor chamber'
param_brightness: 1.0

param_gradient: [
  (0.04,0.04,1.00,0.00),
  (0.04,0.04,1.00,0.00),
  (0.04,0.04,1.00,0.00),
  (0.04,0.04,1.00,0.00),
  (0.04,0.04,1.00,0.00),
  (0.05,0.04,1.00,0.00),
  (0.05,0.05,1.00,0.00),
  (0.06,0.06,1.00,0.00),
  (0.07,0.07,1.00,0.00),
  (0.08,0.08,1.00,0.00),
  (0.09,0.10,1.00,0.00),
  (0.11,0.12,1.00,0.00),
  (0.13,0.13,1.00,0.00),
  (0.15,0.15,1.00,0.00),
  (0.16,0.17,0.99,0.00),
  (0.18,0.19,0.99,0.00),
  (0.20,0.21,0.99,0.00),
  (0.23,0.23,0.99,0.00),
  (0.25,0.25,0.98,0.00),
  (0.27,0.27,0.98,0.00),
  (0.29,0.31,0.98,0.00),
  (0.31,0.42,0.96,0.00),
  (0.31,0.50,0.94,0.00),
  (0.31,0.57,0.92,0.00),
  (0.31,0.63,0.89,0.00),
  (0.31,0.69,0.86,0.00),
  (0.31,0.74,0.84,0.00),
  (0.30,0.78,0.80,0.00),
  (0.29,0.82,0.76,0.00),
  (0.27,0.86,0.72,0.00),
  (0.25,0.89,0.66,0.00),
  (0.23,0.93,0.58,0.00),
  (0.20,0.96,0.50,0.00),
  (0.16,0.98,0.41,0.00),
  (0.13,0.99,0.33,0.00),
  (0.09,1.00,0.25,0.00),
  (0.07,1.00,0.14,0.00),
  (0.08,1.00,0.20,0.00),
  (0.07,1.00,0.24,0.00),
  (0.08,1.00,0.25,0.00),
  (0.11,1.00,0.23,0.00),
  (0.10,1.00,0.18,0.00),
  (0.09,1.00,0.14,0.00),
  (0.18,1.00,0.22,0.00),
  (0.27,0.99,0.25,0.00),
  (0.36,0.98,0.28,0.00),
  (0.45,0.97,0.29,0.00),
  (0.53,0.96,0.29,0.00),
  (0.62,0.94,0.27,0.00),
  (0.71,0.92,0.23,0.00),
  (0.79,0.90,0.16,0.00),
  (0.86,0.88,0.10,0.00),
  (0.91,0.86,0.20,0.00),
  (0.95,0.84,0.25,0.00),
  (0.98,0.82,0.27,0.00),
  (0.98,0.82,0.27,0.00),
  (0.98,0.82,0.24,0.00),
  (0.99,0.82,0.16,0.00),
  (1.00,0.82,0.15,0.00),
  (1.00,0.82,0.13,0.00),
  (1.00,0.82,0.10,0.00),
  (1.00,0.83,0.06,0.00),
  (1.00,0.83,0.03,0.00),
  (1.00,0.82,0.09,0.00),
  (1.00,0.81,0.12,0.00),
  (1.00,0.80,0.14,0.00),
  (1.00,0.80,0.16,0.00),
  (1.00,0.78,0.17,0.00),
  (1.00,0.77,0.18,0.00),
  (1.00,0.76,0.18,0.00),
  (1.00,0.75,0.19,0.00),
  (1.00,0.74,0.19,0.00),
  (1.00,0.72,0.20,0.00),
  (1.00,0.71,0.20,0.00),
  (1.00,0.69,0.20,0.00),
  (1.00,0.68,0.20,0.00),
  (1.00,0.66,0.20,0.00),
  (1.00,0.64,0.20,0.00),
  (1.00,0.62,0.19,0.00),
  (1.00,0.60,0.18,0.00),
  (1.00,0.57,0.16,0.00),
  (1.00,0.54,0.15,0.00),
  (1.00,0.51,0.14,0.00),
  (1.00,0.47,0.13,0.00),
  (1.00,0.43,0.11,0.00),
  (1.00,0.39,0.10,0.00),
  (1.00,0.37,0.08,0.00),
  (1.00,0.36,0.06,0.00),
  (1.00,0.33,0.05,0.00),
  (1.00,0.31,0.04,0.00),
  (1.00,0.29,0.02,0.00),
  (1.00,0.27,0.02,0.00),
  (1.00,0.26,0.01,0.00),
  (1.00,0.24,0.01,0.00),
  (1.00,0.22,0.00,0.00),
  (1.00,0.20,0.00,0.00),
  (1.00,0.18,0.00,0.00),
  (1.00,0.16,0.00,0.00),
  (1.00,0.15,0.00,0.00),
  (1.00,0.13,0.00,0.00),
  (1.00,0.11,0.00,0.00),
  (1.00,0.09,0.00,0.00),
  (1.00,0.07,0.00,0.00),
  (1.00,0.05,0.00,0.00),
  (1.00,0.04,0.00,0.00),
  (1.00,0.02,0.00,0.00),
  (1.00,0.01,0.00,0.00),
  (1.00,0.00,0.00,0.00)]
text:
  {% set temp = printer[param_sensor].temperature %}
  {% set steps = param_gradient|length %}
  {% set idx = (((temp - param_cool_temp) / (param_hot_temp - param_cool_temp)) * steps) | int %}
  {% if idx < 0 %} 
    {% set idx = 0 %}
  {% elif idx > steps-1 %}
    {% set idx = steps-1 %}
  {% endif %}
  { param_gradient[idx][0] * param_brightness },{ param_gradient[idx][1] * param_brightness },{ param_gradient[idx][2] * param_brightness },{ param_gradient[idx][3] * param_brightness }
  